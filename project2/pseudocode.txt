Function staircase_oh_nh(points):
    If points is empty:
        Return empty list
        
    Sort points in descending order by x, then by y
    Initialize empty list staircase

    For each point in sorted points:
        Set dominated = False
        For each stair_point in staircase:
            If stair_point.x >= point.x AND     stair_point.y >= point.y:
                Set dominated = True
                Break
        If not dominated:
            Add point to staircase

    Sort staircase by x in ascending order
    Return staircase

Function staircase_nlogh(points):
    If points is empty:
        Return empty list
    Sort points in descending order by x (and y for tie-breaker)
    Initialize staircase as empty list
    For each point in sorted points:
        Use binary search to find insertion position in staircase
        Check if point is dominated by any point in staircase:
            If dominated:
                Continue to next point
        Insert point into staircase at correct position
        Remove any points in staircase that are now dominated
    Sort staircase by x ascending for final output
    Return staircase

Function staircase_presorted(points):
    If points is empty:
        Return empty list
    Assume points are sorted by x ascending
    Initialize staircase as empty list
    For each point in points:
        While staircase is not empty AND last point in staircase has y <= current point.y:
            Remove last point from staircase (it is dominated)
        Add current point to staircase
    Return staircase
